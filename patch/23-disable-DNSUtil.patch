diff -ur ../../src-unpatched/trunk/org/jivesoftware/smack/ConnectionConfiguration.java org/jivesoftware/smack/ConnectionConfiguration.java
--- ../../src-unpatched/trunk/org/jivesoftware/smack/ConnectionConfiguration.java	2009-12-06 19:45:45.000000000 +0100
+++ org/jivesoftware/smack/ConnectionConfiguration.java	2009-12-06 19:57:27.000000000 +0100
@@ -21,7 +21,6 @@
 package org.jivesoftware.smack;
 
 import org.jivesoftware.smack.proxy.ProxyInfo;
-import org.jivesoftware.smack.util.DNSUtil;
 
 import javax.net.SocketFactory;
 import org.apache.harmony.javax.security.auth.callback.CallbackHandler;
@@ -83,35 +82,6 @@
     private ProxyInfo proxy;
 
     /**
-     * Creates a new ConnectionConfiguration for the specified service name.
-     * A DNS SRV lookup will be performed to find out the actual host address
-     * and port to use for the connection.
-     *
-     * @param serviceName the name of the service provided by an XMPP server.
-     */
-    public ConnectionConfiguration(String serviceName) {
-        // Perform DNS lookup to get host and port to use
-        DNSUtil.HostAddress address = DNSUtil.resolveXMPPDomain(serviceName);
-        init(address.getHost(), address.getPort(), serviceName, 
-			ProxyInfo.forDefaultProxy());
-    }
-	
-	/**
-     * Creates a new ConnectionConfiguration for the specified service name 
-     * with specified proxy.
-     * A DNS SRV lookup will be performed to find out the actual host address
-     * and port to use for the connection.
-     *
-     * @param serviceName the name of the service provided by an XMPP server.
-     * @param proxy the proxy through which XMPP is to be connected
-     */
-    public ConnectionConfiguration(String serviceName,ProxyInfo proxy) {
-        // Perform DNS lookup to get host and port to use
-        DNSUtil.HostAddress address = DNSUtil.resolveXMPPDomain(serviceName);
-        init(address.getHost(), address.getPort(), serviceName, proxy);
-    }
-
-    /**
      * Creates a new ConnectionConfiguration using the specified host, port and
      * service name. This is useful for manually overriding the DNS SRV lookup
      * process that's used with the {@link #ConnectionConfiguration(String)}
Only in ../../src-unpatched/trunk/org/jivesoftware/smack/util: DNSUtil.java
diff -ur ../../src-unpatched/trunk/org/jivesoftware/smack/XMPPConnection.java org/jivesoftware/smack/XMPPConnection.java
--- ../../src-unpatched/trunk/org/jivesoftware/smack/XMPPConnection.java	2009-12-06 19:45:45.000000000 +0100
+++ org/jivesoftware/smack/XMPPConnection.java	2009-12-06 19:59:49.000000000 +0100
@@ -180,56 +180,6 @@
 
 
     /**
-     * Creates a new connection to the specified XMPP server. A DNS SRV lookup will be
-     * performed to determine the IP address and port corresponding to the
-     * service name; if that lookup fails, it's assumed that server resides at
-     * <tt>serviceName</tt> with the default port of 5222. Encrypted connections (TLS)
-     * will be used if available, stream compression is disabled, and standard SASL
-     * mechanisms will be used for authentication.<p>
-     * <p/>
-     * This is the simplest constructor for connecting to an XMPP server. Alternatively,
-     * you can get fine-grained control over connection settings using the
-     * {@link #XMPPConnection(ConnectionConfiguration)} constructor.<p>
-     * <p/>
-     * Note that XMPPConnection constructors do not establish a connection to the server
-     * and you must call {@link #connect()}.<p>
-     * <p/>
-     * The CallbackHandler will only be used if the connection requires the client provide
-     * an SSL certificate to the server. The CallbackHandler must handle the PasswordCallback
-     * to prompt for a password to unlock the keystore containing the SSL certificate.
-     *
-     * @param serviceName the name of the XMPP server to connect to; e.g. <tt>example.com</tt>.
-     * @param callbackHandler the CallbackHandler used to prompt for the password to the keystore.
-     */
-    public XMPPConnection(String serviceName, CallbackHandler callbackHandler) {
-        // Create the configuration for this new connection
-        ConnectionConfiguration config = new ConnectionConfiguration(serviceName);
-        config.setCompressionEnabled(false);
-        config.setSASLAuthenticationEnabled(true);
-        config.setDebuggerEnabled(DEBUG_ENABLED);
-        this.configuration = config;
-        this.callbackHandler = callbackHandler;
-    }
-
-    /**
-     * Creates a new XMPP conection in the same way {@link #XMPPConnection(String,CallbackHandler)} does, but
-     * with no callback handler for password prompting of the keystore.  This will work
-     * in most cases, provided the client is not required to provide a certificate to 
-     * the server.
-     *
-     * @param serviceName the name of the XMPP server to connect to; e.g. <tt>example.com</tt>.
-     */
-    public XMPPConnection(String serviceName) {
-        // Create the configuration for this new connection
-        ConnectionConfiguration config = new ConnectionConfiguration(serviceName);
-        config.setCompressionEnabled(false);
-        config.setSASLAuthenticationEnabled(true);
-        config.setDebuggerEnabled(DEBUG_ENABLED);
-        this.configuration = config;
-        this.callbackHandler = config.getCallbackHandler();
-    }
-
-    /**
      * Creates a new XMPP conection in the same way {@link #XMPPConnection(ConnectionConfiguration,CallbackHandler)} does, but
      * with no callback handler for password prompting of the keystore.  This will work
      * in most cases, provided the client is not required to provide a certificate to 
